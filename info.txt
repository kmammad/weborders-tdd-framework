
TDD (Test Driven Development) Framework

Do not confuse TDD with DDT -> DDT (Data-Driven Testing) - running the same tests with different data inputs. An example
is Data Provider

TDD is a style of framework, test written with test annotation with TestNG or JUnit. Implement a feature based on tests


TDD Framework Building Steps:
1. Create a maven project
2. Add the necessary dependencies
3. Add project specific .gitignore file BEFORE tracking the project with git (git in it)
        .idea/
        target/ forward slash means it's a folder
        *.iml
        .DS_Store
   #git rm -r --cached <folder or file name> to remove unwanted folder or files retroactively
4. Create the package structure (pages - page object model classes/repositories)
5. Add your test cases following the Page Object Model.
6. Add an xml files for running tests (regression, smoke)
7. Add and configure the Base class (framework test base class), inc config property file
8. Add properties file and ConfigReader Utility class to read from the file
9. Add other utilities(Driver, SeleniumUtils, CSVReader)
10. Add headless browser support
11. Add cross browser testing support by adding an option to pass browser from command line - adjust Driver class code


TDD TestNG Framework components (tools used):
1) Java (version 17) -> writing framework code (test cases, Selenium library uses Java behind the scene)
2) Maven (4.0.0) -> create/manage framework structure, dependencies. Execute tests thru command line (CICD tools, cloud)
3) Selenium(4.22.0) WebDriver -> creating UI tests(scripts)
4) TestNG (7.10.2) -> run the tests, configure and organize test cases via an xml file and annotations
5) Faker -> mock data generation
6) Commons IO -> IO (input/output) operations
7) Intellij -> develop, run, test the framework code, fix the errors, speed up the development process.
8) Git/Github =-> version control, code collaboration, remote repository (github owned by Microsoft), other similar to github is bitbucket
9) .gitignore -> ignore unnecessary files (auto generated config files) that are not important for the framework code to prevent merge conflicts
10) testng xml file -> configure/organize/group our tests in certain manner
11) .properties file -> stores project specific global data/variables
12) utility classes (ConfigReader, Driver, SeleniumUtils) -> store commonly used methods
13) Framework Base Class -> to store common setup and teardown operations(methods) for all test cases
14) Lombok dependency with annotations @Data, @AllArgsConstructor, @NoArgsConstructor, generates boilerplate code
(toString, getter/setter, hashcode and equals) for our page classes

Design Pattern used in this Framework:
1) Singleton -> design pattern applied to Driver class to ensure single WebDriver instance during test execution.
2) Page Object Model -> design pattern used in UI test frameworks to reduce repeated code and improve maintainability
    Steps:
    - create a class for each page of the app, and add the webelements there with @FindBY annotations
    - use the page class in your test before creating the object of the class and accessing the webelements
    through getters or using methods that interact with those elements.
3) Page Factory - a technique of implementing Page Object Model in a more readable and efficient way: we use @FindBy
 annotations for Webelements and use PageFactory.initElements(Driver.getDriver(), this) in the constructor of the class

Branching Basics:
git branch -> shows the current branch you are at
git branch <name> -> creates a new branch
git checkout <name> -> switches to the branch
git branch -d <name> -> delete the branch, you need to be in other branch to do this


Using Branch Based workflow for Test Automation Framework Code Collaboration:
1. Framework Creation and Initial Push: The team lead creates a test automation framework and
   pushes it to his/her remote GitHub repository.
2. Access Provision and Main Branch Protection: The team lead provides push access to the other team members by adding them
   as collaborators. To prevent direct commits, the team lead adds a protection rule to the main branch.
3. Framework Cloning: Each team member clones the test automation framework on their local machines using the command git
   clone
4. Code Update: Each team member pulls the latest code from the main branch to ensure they're working on the most recent
   version of the project.
5. Branch Creation: Team members create new branches for implementing their tasks and switch using
   git checkout -b branch-name.
6. Implementing Changes: Team members start adding changes and commit those changes in their respective branches using
   git commit -m "message".
7. Pushing changes: Once they've completed their work, team members push their branches to the remote repository using
   git push --set-upstream origin branch-name. This step can be done either through the command line or
   through IntelliJ (which require login to the GitHub account).
8. Pul Request (Merge Request) Creation: Each team member then logs into their GitHub account, accesses the team
   repository, and creates a pull request to propose the changes they made in their branch be merged into main.
9. Code Review and Merge: The assigned reviewer(s) review the pull request and if everything is fine, they merge
   the branch into main, close the pull requests, and delete the branch from the remote repository.
10. Local Branch Deletion: After their changes have been merged, team members delete their old branches locally using
    git branch -d branch-name.
11. Pull the Main Branch: To get the latest updates that include their and other's merged changes, team members pull
    the main branch code.
12. Repetition of Steps: Steps 5-11 are repeated for every task.

Git Merge Conflict = it is a conflict when a change that comes from one branch is incompatible with the change that
already exists in the current branch

Example merge conflict:

<<<<<<<<<< sprint03
browser=safari

=============
browser=edge
>>>>>>>>> main

To resolve: choose the change that you want to keep and commit the change in GitHUb.

<<<<<<<<<< sprint03 // remove this line
browser=safari      // decide which version to keep

=============      // remove this line
browser=edge       // decide which version to keep
>>>>>>>>> main     // remove this line

How to avoid merge conflicts?
1. Always pull the latest code from the Main branch before adding any new code or creating a new branch.
2. Limit working on the common files such as TestBase, .properties etc. Create your own test class for your test code
3. Structure code in multiple, smaller files rather than large ones.
4. Keep merge requests small and specific, minimizing code changes to a particular change.
5. Merge as soon as possible, with regular review/approval cycles to avoid delays.









